import java.util.stream.Collectors

plugins {
  id 'application'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.springframework.boot' version '2.2.5.RELEASE'
  id "uk.gov.hmcts.java" version '0.8.0'
  id 'com.github.ben-manes.versions' version '0.27.0'
  id 'org.sonarqube' version '3.0'
  id 'idea'
  id "info.solidsoft.pitest" version '1.5.1'
}

apply from: 'liquibase.gradle'
group = 'uk.gov.hmcts.reform'
version = '0.0.1'
sourceCompatibility = 11
targetCompatibility = 11
def javaLoggingVersion = '5.1.6'

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
  }

  checkstyle {
    toolVersion "7.7"
  }

  task smokeTest(type: Test, description: 'Runs the smoke tests', group: 'Verification') {
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
  }

  task functionalTest(type: Test, description: 'Runs the functional tests', group: 'Verification') {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
  }
}

idea {
  module {
    testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
    testSourceDirs += project.sourceSets.smokeTest.resources.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.resources.srcDirs
  }
}
  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
  }

  task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
  }

  task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
    // set your environment variables here
    // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
  }

  task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
  }

checkstyleMain.enabled(false)
checkstyleTest.enabled(false)

  pmd {
    toolVersion = "6.18.0"
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
  }

  project.tasks['sonarqube'].dependsOn jacocoTestReport

  def listFiles(String pattern) {
    return new FileNameFinder()
      .getFileNames("${project.rootDir}", pattern)
      .stream()
      .collect(Collectors.joining(","))
  }
  def sonarExclusions = [
    '**/model/**',
    '**/config/**'
  ]

  sonarqube {
    properties {
      property "sonar.host.url", "https://sonar.reform.hmcts.net/"
      property "sonar.dynamicAnalysis", "reuseReports"
      property "sonar.java.coveragePlugin", "jacoco"
      property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
      property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
      property "sonar.exclusions", sonarExclusions.join(", ")
      property "sonar.test.exclusions", sonarExclusions.join(", ")
      property "sonar.coverage.exclusions", sonarExclusions.join(", ")
      property "sonar.pitest.mode", "reuseReport"
      property "sonar.pitest.reportsDirectory", "build/reports/pitest"
      property "sonar.projectName", "CCPAY :: Bulkscanning payment"
      property "sonar.projectKey", "uk.gov.hmcts.reform:ccpay-bulkscanning-api"
    }
  }

  dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
      rules.all { ComponentSelection selection ->
        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
          selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
        }
        if (rejected) {
          selection.reject('Release candidate')
        }
      }
    }
  }

  repositories {
    mavenLocal()
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    jcenter()
    mavenCentral()

  }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:2.2.5.RELEASE"
      mavenBom 'org.apache.logging.log4j:log4j-bom:2.13.3'
    }
    dependencies {
      dependencySet(
        group: 'com.fasterxml.jackson.core',
        version: '2.10.1'
      ) {
        entry 'jackson-core'
        entry 'jackson-databind'
      }
    }
  }

  def versions = [
    junit           : '5.5.0',
    reformLogging   : '5.1.1',
    springBoot      : springBoot.class.package.implementationVersion,
    springfoxSwagger: '2.9.2',
    pitest      : '1.3.2',
    gradlePitest: '1.3.0',
    sonarPitest : '0.5'
  ]

  configurations.all {
    resolutionStrategy {
      eachDependency { DependencyResolveDetails details ->
        if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
          details.useVersion '2.10.1'
        }

        if (details.requested.name == 'jackson-databind') {
          details.useVersion '2.10.2'
        }
      }
    }
  }

dependencies {
  compile ('com.sun.xml.bind:jaxb-osgi:2.3.1')
  compile group: 'com.google.guava', name: 'guava', version: '24.1.1-jre'
  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
  compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
  compile("org.springframework.boot:spring-boot-starter-web")
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version:'2.9.2'
  compile group: 'io.springfox', name: 'springfox-swagger2', version:'2.9.0'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.1.2.RELEASE'
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.11'
  compile group: 'joda-time', name: 'joda-time', version: '2.10.5'
  compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.11'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  compile group: 'com.querydsl', name: 'querydsl-jpa', version:'4.2.2'
  compile group: 'uk.gov.hmcts.reform', name: 'liquibase-core', version:'3.8.1'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.10.2'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'
  compile(group: 'org.postgresql', name: 'postgresql', version: '42.2.13') {
    exclude(module: 'commons-logging')
    exclude(module: 'slf4j-simple')
  }
  compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'
  compile group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
  compile group: 'uk.gov.hmcts.reform', name: 'logging', version: javaLoggingVersion
  compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: javaLoggingVersion
  compile group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: javaLoggingVersion
  compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version:'5.0'
  compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'
  compile group:'org.apache.poi', name: 'poi', version: '4.1.1'
  compile group:'org.apache.poi', name: 'poi-ooxml', version: '4.1.1'
  compile group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.3'
  compile group: 'commons-io', name: 'commons-io', version: '2.5'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.2.1.RELEASE'
  compile group: 'io.github.openfeign', name: 'feign-jackson', version: '10.1.0'
  compile group: 'org.jboss.aerogear', name: 'aerogear-otp-java', version:'1.0.0'
  compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.3'
  compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version:'0.0.4'
  testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude(module: 'commons-logging')
  }
  compileOnly 'org.projectlombok:lombok:1.18.12'
  annotationProcessor 'org.projectlombok:lombok:1.18.12'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
  functionalTestAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
  smokeTestAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
  testCompile group: 'org.springframework.security', name: 'spring-security-test', version: '5.2.1.RELEASE'
  testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.3.0'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.4.0'
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'
  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testCompile group: 'org.testcontainers', name: 'postgresql', version: '1.14.2'
  testCompile group: 'com.h2database', name: 'h2'
  functionalTestCompile sourceSets.test.runtimeClasspath
  smokeTestCompile sourceSets.test.runtimeClasspath

  mainClassName = 'uk.gov.hmcts.reform.bulkscanning.BulkScanningApiApplication'
  def jarName = 'bulk-scanning-payment-api.jar'
  bootJar {
    archiveName = jarName
    manifest {
      attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
  }
}

  jacoco {
    toolVersion = "0.8.4"
    reportsDir = file("${project.rootDir}/build/jacoco")
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled false
      html.destination file("${buildDir}/build/jacoco")
    }
    afterEvaluate {
      getClassDirectories().from = getClassDirectories().files.collect {
        fileTree(dir: it, exclude: [
          'uk/gov/hmcts/reform/bulkscanning/config/**'
        ])
      }
    }
  }

  dependencyCheck {
    suppressionFile = 'config/owasp/suppressions.xml'
  }

  test {
    finalizedBy jacocoTestReport
    jacoco {
      destinationFile = file("${project.rootDir}/build/jacoco/test.exec")
    }
  }

  jacocoTestReport {
    executionData(test)
    reports {
      xml.enabled true
      html.enabled true
    }
  }
  run {
    def debug = System.getProperty("debug")
    if (debug == 'true') {
      jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
  }

  bootRun {
    //…other settings, like...
    main = 'uk.gov.hmcts.reform.bulkscanning.BulkScanningApiApplication'
  }

  pitest {
    targetClasses = ['uk.gov.hmcts.reform.bulkscanning.*']
    excludedClasses = ['uk.gov.hmcts.reform.bulkscanning.config.*',
                       'uk.gov.hmcts.reform.bulkscanning.mapper.*',
                       'uk.gov.hmcts.reform.bulkscanning.model.*',
                       'uk.gov.hmcts.reform.bulkscanning.exception.*']
    threads = 10
    outputFormats = ['XML', 'HTML']
    historyInputLocation = 'build/reports/pitest/fastermutationtesting'
    historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
    mutationThreshold = 90
  }
