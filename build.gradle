import java.util.stream.Collectors

plugins {
  id 'application'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
  id 'org.springframework.boot' version '2.1.6.RELEASE'
  id 'org.owasp.dependencycheck' version '5.2.0'
  id 'com.github.ben-manes.versions' version '0.21.0'
  id 'org.sonarqube' version '2.7.1'
  id 'idea'
}

apply from: 'liquibase.gradle'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8
def javaLoggingVersion = '5.0.1'

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }
  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
  }
  task smokeTest(type: Test, description: 'Runs the smoke tests', group: 'Verification') {
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
  }



}
idea {
  module {
    testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
    testSourceDirs += project.sourceSets.smokeTest.resources.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.resources.srcDirs
  }
}
tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

pmd {
  toolVersion = "6.16.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

project.tasks['sonarqube'].dependsOn test

def listFiles(String pattern) {
  return new FileNameFinder()
    .getFileNames("${project.rootDir}", pattern)
    .stream()
    .collect(Collectors.joining(","))
}
def sonarExclusions = [
  '**/bulkscanning/**'
  ]
sonarqube {
  properties {
    property "sonar.projectName", "CCPAY :: Bulkscanning payment"
    property "sonar.jacoco.reportPath", "${listFiles('**/test.exec')}"
    property "sonar.dynamicAnalysis", "reuseReports"
    property "sonar.java.coveragePlugin", "jacoco"
    property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    property "sonar.projectKey", "uk.gov.hmcts.reform:ccpay-bulkscanning-api"
    property "sonar.exclusions", sonarExclusions.join(", ")
    property "sonar.test.exclusions", sonarExclusions.join(", ")
    property "sonar.coverage.exclusions", sonarExclusions.join(", ")
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

repositories {
  mavenLocal()
  maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
  jcenter()
  mavenCentral()

}

def versions = [
  junit           : '5.5.0',
  reformLogging   : '5.0.1',
  sonarPitest        : '0.5',
  springBoot      : springBoot.class.package.implementationVersion,
  springfoxSwagger: '2.9.2'
]

configurations.all {
  resolutionStrategy {
    eachDependency { DependencyResolveDetails details ->
      if (details.requested.group in ['com.fasterxml.jackson.core', 'com.fasterxml.jackson.module', 'com.fasterxml.jackson.datatype']) {
        details.useVersion '2.9.9'
      }

      if (details.requested.name == 'jackson-databind') {
        details.useVersion '2.9.9.3'
      }
    }
  }
}

dependencies {
  compile("org.springframework.boot:spring-boot-starter-web")
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.4'
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version:'2.9.0'
  compile group: 'io.springfox', name: 'springfox-swagger2', version:'2.9.0'
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformLogging
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.1.2.RELEASE'
  compile group: 'org.projectlombok', name: 'lombok', version: '1.18.4'
  compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.2'
  compile group: 'joda-time', name: 'joda-time', version: '2.9.9'
  compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.9'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  compile group: 'com.querydsl', name: 'querydsl-jpa', version:'4.1.4'
  compile group: 'org.liquibase', name: 'liquibase-core', version: '3.7.0'
  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.9.9.3'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'
  compile(group: 'org.postgresql', name: 'postgresql', version: '42.2.6') {
    exclude(module: 'commons-logging')
    exclude(module: 'slf4j-simple')
  }
  compile 'uk.gov.hmcts.reform:health-spring-boot-starter:0.0.4'
  compile group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
  testCompile("org.springframework.boot:spring-boot-starter-test")
  testCompile group: 'org.projectlombok', name: 'lombok', version: '1.16.16'
  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: javaLoggingVersion
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: javaLoggingVersion

  testCompile group: 'io.rest-assured', name: 'rest-assured', version: '4.1.0'
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testCompile group: 'org.projectlombok', name: 'lombok', version: '1.18.8'
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testCompile group: 'org.testcontainers', name: 'postgresql', version: '1.12.0'


  smokeTestCompile sourceSets.test.runtimeClasspath

  mainClassName = 'uk.gov.hmcts.reform.bulkscanning.BulkScanningApiApplication'

  def jarName = 'bulk-scanning-payment-api.jar'

  bootJar {
    archiveName = jarName
    manifest {
      attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
  }
}

jacoco {
  toolVersion = "0.8.4"
  reportsDir = file("${project.rootDir}/build/jacoco")
}
jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.destination file("${buildDir}/build/jacoco")
  }
}

dependencyCheck {
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
  format='ALL'
}

test {
  finalizedBy jacocoTestReport
  jacoco {
    append = true
    destinationFile = file("${project.rootDir}/build/jacoco/test.exec")
  }
}
jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled true
    html.enabled true
  }
}
run {
  def debug = System.getProperty("debug")
  if (debug == 'true') {
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
  }
}

bootRun {
  //â€¦other settings, like...
  main = 'uk.gov.hmcts.reform.bulkscanning.BulkScanningApiApplication'
}
