import java.util.stream.Collectors

buildscript {
  dependencies {
    classpath "net.serenity-bdd:serenity-single-page-report:4.2.3"
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.1'
  id 'org.owasp.dependencycheck' version '10.0.4'
  id 'org.springframework.boot' version '3.3.5'
  id 'uk.gov.hmcts.java' version '0.12.63'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '5.1.0.4882'
  id 'idea'
  id 'info.solidsoft.pitest' version '1.15.0'
}

apply from: 'liquibase.gradle'
group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

checkstyle {
  toolVersion = '10.18.2'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
    jar {
      duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
  }

  task smokeTest(type: Test, description: 'Runs the smoke tests', group: 'Verification') {
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
  }

  task functionalTest(type: Test, description: 'Runs the functional tests', group: 'Verification') {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    finalizedBy aggregate
    jar {
      duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    }
  }

  tasks.withType(Copy) {
    filesMatching("**/*.yaml") {
      duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
  }
}

idea {
  module {
    testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
    testSourceDirs += project.sourceSets.smokeTest.resources.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.resources.srcDirs
  }
}
tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}


tasks.register('functional', Test) {
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
  finalizedBy aggregate
}

functional.finalizedBy(aggregate)

tasks.register('integration', Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  useJUnitPlatform()
  // set your environment variables here
  // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyleMain.enabled(false)
checkstyleTest.enabled(false)

pmd {
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

def listFiles(String pattern) {
  return new FileNameFinder()
    .getFileNames("${project.rootDir}", pattern)
    .stream()
    .collect(Collectors.joining(","))
}

def sonarExclusions = [
  '**/model/**',
  '**/config/**'
]

sonarqube {
  properties {
    property "sonar.host.url", "https://sonarcloud.io/"
    property "sonar.dynamicAnalysis", "reuseReports"
    property "sonar.java.coveragePlugin", "jacoco"
    property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
    property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
    property "sonar.exclusions", sonarExclusions.join(", ")
    property "sonar.test.exclusions", sonarExclusions.join(", ")
    property "sonar.coverage.exclusions", sonarExclusions.join(", ")
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.projectName", "CCPAY :: Bulkscanning payment"
    property "sonar.projectKey", "uk.gov.hmcts.reform:ccpay-bulkscanning-api"
    property "sonar.organization", "hmcts"
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1' }
}

dependencyManagement {
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.3'
    mavenBom 'org.apache.logging.log4j:log4j-bom:2.24.1'
  }
}

def versions = [
  apachePoi         : '5.3.0',
  hmctsLogging      : '6.1.9',
  log4j             : '2.24.1',
  lombok            : '1.18.38',
  springBoot        : springBoot.class.package.implementationVersion,
  sonarPitest       : '0.5',
  serenity          : '4.2.3',
  serenityCucumber  : '4.2.3'
]

apply from: "${rootDir}/cve-resolution-strategy.gradle"

dependencies {
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.hmctsLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.hmctsLogging
  implementation group: 'com.github.hmcts', name: 'auth-checker-lib', version: '3.1.1'
  implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.4'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.2'
  implementation group: 'com.google.guava', name: 'guava', version: '33.3.1-jre'
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.41.2'
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation group: 'commons-io', name: 'commons-io', version: '2.17.0'
  implementation group: 'io.github.openfeign.querydsl', name: 'querydsl-jpa', version: '6.8'
  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '13.5'
  implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.5'
  implementation group: 'io.jsonwebtoken', name: 'jjwt', version:'0.12.6'
  implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.1.0'
  implementation group: 'joda-time', name: 'joda-time', version: '2.13.0'
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: versions.log4j
  implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: versions.log4j
  implementation group: 'org.apache.poi', name: 'poi-ooxml-lite', version: versions.apachePoi
  implementation group: 'org.apache.poi', name: 'poi', version: versions.apachePoi
  implementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest
  implementation group: 'org.jboss.aerogear', name: 'aerogear-otp-java', version:'1.0.0'
  implementation group: 'org.liquibase', name: 'liquibase-core', version: '4.27.0'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.4'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'
  implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  implementation group: 'org.springframework.security', name: 'spring-security-config'
  implementation group: 'org.springframework.security', name: 'spring-security-web'

  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.9', classifier: 'all'
  testImplementation group: 'com.h2database', name: 'h2'
  testImplementation group: 'io.rest-assured', name: 'rest-assured'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-test-autoconfigure'
  testImplementation group: 'org.springframework.security', name: 'spring-security-test'
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.20.4'

  testImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  smokeTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  functionalTestImplementation sourceSets.test.runtimeClasspath
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  smokeTestImplementation sourceSets.test.runtimeClasspath

}

application {
  mainClass = 'uk.gov.hmcts.reform.bulkscanning.BulkScanningApiApplication'
  def jarName = 'bulk-scanning-payment-api.jar'
  bootJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveFileName = jarName
    manifest {
      attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
  }
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    html.outputLocation = file("${buildDir}/build/jacoco")
  }
  afterEvaluate {
    getClassDirectories().from = getClassDirectories().files.collect {
      fileTree(dir: it, exclude: [
        'uk/gov/hmcts/reform/bulkscanning/config/**'
      ])
    }
  }
}

dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

test {
  finalizedBy jacocoTestReport
  jacoco {
    destinationFile = file("${project.rootDir}/build/jacoco/test.exec")
  }
}

task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

serenity {
  reports = ["single-page-html"]
}

run {
  def debug = System.getProperty("debug")
  if (debug == 'true') {
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
  }
}

bootRun {
  //…other settings, like...
  mainClass = 'uk.gov.hmcts.reform.bulkscanning.BulkScanningApiApplication'
}

pitest {
  targetClasses = ['uk.gov.hmcts.reform.bulkscanning.*']
  excludedClasses = ['uk.gov.hmcts.reform.bulkscanning.config.*',
                     'uk.gov.hmcts.reform.bulkscanning.mapper.*',
                     'uk.gov.hmcts.reform.bulkscanning.model.*',
                     'uk.gov.hmcts.reform.bulkscanning.exception.*']
  threads = 10
  outputFormats = ['XML', 'HTML']
  mutationThreshold = 90
}
