import java.util.stream.Collectors

buildscript {
  dependencies {
    classpath "net.serenity-bdd:serenity-gradle-plugin:2.5.10"
    classpath "net.serenity-bdd:serenity-single-page-report:2.1.13"
  }
}

plugins {
  id 'application'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.15.RELEASE'
  id 'org.owasp.dependencycheck' version '9.1.0'
  id 'org.springframework.boot' version '2.7.18'
  id "uk.gov.hmcts.java" version '0.12.0'
  id 'com.github.ben-manes.versions' version '0.27.0'
  id 'org.sonarqube' version '3.0'
  id 'idea'
  id "info.solidsoft.pitest" version '1.9.0'
}

apply plugin: 'net.serenity-bdd.aggregator'
apply from: 'liquibase.gradle'
group = 'uk.gov.hmcts.reform'
version = '0.0.1'


def javaLoggingVersion = '6.0.1'
def springCloudVersion = '2021.0.9'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
    jar {
      duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
  }

  checkstyle {
    toolVersion "7.8.1"
  }

  task smokeTest(type: Test, description: 'Runs the smoke tests', group: 'Verification') {
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
  }

  task functionalTest(type: Test, description: 'Runs the functional tests', group: 'Verification') {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    finalizedBy aggregate
    jar {
      duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    }
  }

  tasks.withType(Copy) {
    filesMatching("**/*.yaml") {
      duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
  }

 jar {
   duplicatesStrategy(DuplicatesStrategy.INCLUDE)
 }
}

  functionalTest.finalizedBy(aggregate)

idea {
  module {
    testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
    testSourceDirs += project.sourceSets.smokeTest.resources.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
    testSourceDirs += project.sourceSets.functionalTest.resources.srcDirs
  }
}
tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}


task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    finalizedBy aggregate
  }

 functional.finalizedBy(aggregate)

  task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
    // set your environment variables here
    // environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
  }

  task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
  }

checkstyleMain.enabled(false)
checkstyleTest.enabled(false)

  pmd {
    toolVersion = "6.18.0"
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
  }

  project.tasks['sonarqube'].dependsOn jacocoTestReport

  def listFiles(String pattern) {
    return new FileNameFinder()
      .getFileNames("${project.rootDir}", pattern)
      .stream()
      .collect(Collectors.joining(","))
  }
  def sonarExclusions = [
    '**/model/**',
    '**/config/**'
  ]

  sonarqube {
    properties {
      property "sonar.host.url", "https://sonarcloud.io/"
      property "sonar.dynamicAnalysis", "reuseReports"
      property "sonar.java.coveragePlugin", "jacoco"
      property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
      property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
      property "sonar.exclusions", sonarExclusions.join(", ")
      property "sonar.test.exclusions", sonarExclusions.join(", ")
      property "sonar.coverage.exclusions", sonarExclusions.join(", ")
      property "sonar.pitest.mode", "reuseReport"
      property "sonar.pitest.reportsDirectory", "build/reports/pitest"
      property "sonar.projectName", "CCPAY :: Bulkscanning payment"
      property "sonar.projectKey", "uk.gov.hmcts.reform:ccpay-bulkscanning-api"
      property "sonar.organization", "hmcts"
    }
  }

  dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
      rules.all { ComponentSelection selection ->
        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
          selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
        }
        if (rejected) {
          selection.reject('Release candidate')
        }
      }
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
  }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:2.7.13"
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
      mavenBom 'org.apache.logging.log4j:log4j-bom:2.17.0'
    }
  }

  def versions = [
    junit           : '5.5.0',
    reformLogging   : '5.1.1',
    springBoot      : springBoot.class.package.implementationVersion,
    springfoxSwagger: '2.9.2',
    pitest      : '1.9.0',
    gradlePitest: '1.3.0',
    sonarPitest : '0.5',
    serenity                : '2.6.0',
    serenityCucumber        : '3.0.1'
  ]

  apply from: "${rootDir}/cve-resolution-strategy.gradle"

ext['tomcat.version'] = '9.0.88' // CVE-2023-46589, CVE-2023-42794, CVE-2023-28709
ext['netty.version'] = '4.1.100.Final' // CVE-2023-44487
ext['jackson.version'] = '2.17.1' // CVE-2021-46877, CVE-2022-42003, CVE-2022-42004, CVE-2020-36518

dependencies {
  implementation ('com.sun.xml.bind:jaxb-osgi:2.3.1')
  implementation group: 'com.google.guava', name: 'guava', version: '33.2.0-jre'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.0'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.0'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', {
    exclude group: 'com.google.guava', module: 'guava' // guava-30.1-jre.jar CVE-2023-2976, CVE-2020-8908
  }
  implementation group: 'org.springframework.boot', name: 'spring-boot-autoconfigure'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'

  implementation "org.springframework.security:spring-security-web"
  implementation "org.springframework.security:spring-security-config"
  implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
  implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
  implementation 'org.springframework.boot:spring-boot-starter-validation'


  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-webmvc-core', version: '1.7.0'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.1.6.RELEASE'
  implementation group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.5.11'
  implementation group: 'joda-time', name: 'joda-time', version: '2.10.5'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
  implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
  implementation group: 'com.querydsl', name: 'querydsl-jpa', version:'4.2.2'
  implementation 'org.liquibase:liquibase-core:4.27.0'

  implementation(group: 'org.postgresql', name: 'postgresql', version: '42.3.3') {
    exclude(module: 'commons-logging')
    exclude(module: 'slf4j-simple')
  }




  implementation group: 'org.codehaus.sonar-plugins', name: 'sonar-pitest-plugin', version: versions.sonarPitest

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: javaLoggingVersion
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: javaLoggingVersion

  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'
  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'
  implementation group:'org.apache.poi', name: 'poi', version: '4.1.2'
  implementation group:'org.apache.poi', name: 'poi-ooxml', version: '4.1.1'
  implementation group: 'com.github.hmcts', name: 'auth-checker-lib', version: '2.1.5'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '4.1.2'

  implementation group: 'io.jsonwebtoken', name: 'jjwt', version:'0.9.1'
  implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '1.3.1'


  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.37.3'
  implementation "io.github.openfeign:feign-httpclient:12.3"

  implementation group: 'commons-io', name: 'commons-io', version: '2.8.0'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '12.3'
  implementation group: 'org.jboss.aerogear', name: 'aerogear-otp-java', version:'1.0.0'
  implementation group: 'com.github.hmcts', name: 'properties-volume-spring-boot-starter', version: '0.1.1'


  testImplementation group: 'org.springframework.security', name: 'spring-security-test'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-test-autoconfigure'
  testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
    exclude(module: 'commons-logging')
  }
  testImplementation group: 'io.rest-assured', name: 'rest-assured'
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.9.3'
  testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit

  testImplementation group: 'com.h2database', name: 'h2'
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.15.1'
  testImplementation 'com.github.hmcts:fortify-client:1.3.0:all'

  testImplementation group: 'org.projectlombok', name: 'lombok', version: '1.18.28'
  compileOnly 'org.projectlombok:lombok:1.18.28'
  annotationProcessor 'org.projectlombok:lombok:1.18.28'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'
  functionalTestAnnotationProcessor 'org.projectlombok:lombok:1.18.28'
  smokeTestAnnotationProcessor 'org.projectlombok:lombok:1.18.28'


  functionalTestImplementation sourceSets.test.runtimeClasspath
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  functionalTestImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  smokeTestImplementation sourceSets.test.runtimeClasspath

  mainClassName = 'uk.gov.hmcts.reform.bulkscanning.BulkScanningApiApplication'
  def jarName = 'bulk-scanning-payment-api.jar'
  bootJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    archiveName = jarName
    manifest {
      attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
  }
}

  jacoco {
    toolVersion = "0.8.7"
    reportsDir = file("${project.rootDir}/build/jacoco")
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled false
      html.destination file("${buildDir}/build/jacoco")
    }
    afterEvaluate {
      getClassDirectories().from = getClassDirectories().files.collect {
        fileTree(dir: it, exclude: [
          'uk/gov/hmcts/reform/bulkscanning/config/**'
        ])
      }
    }
  }

  dependencyCheck {
    suppressionFile = 'config/owasp/suppressions.xml'
  }

  test {
    finalizedBy jacocoTestReport
    jacoco {
      destinationFile = file("${project.rootDir}/build/jacoco/test.exec")
    }
  }

  task fortifyScan(type: JavaExec)  {
    main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
  }

serenity {
  reports = ["single-page-html"]
}

  jacocoTestReport {
    executionData(test)
    reports {
      xml.enabled true
      html.enabled true
    }
  }
  run {
    def debug = System.getProperty("debug")
    if (debug == 'true') {
      jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
  }

  bootRun {
    //…other settings, like...
    main = 'uk.gov.hmcts.reform.bulkscanning.BulkScanningApiApplication'
  }

  pitest {
    targetClasses = ['uk.gov.hmcts.reform.bulkscanning.*']
    excludedClasses = ['uk.gov.hmcts.reform.bulkscanning.config.*',
                       'uk.gov.hmcts.reform.bulkscanning.mapper.*',
                       'uk.gov.hmcts.reform.bulkscanning.model.*',
                       'uk.gov.hmcts.reform.bulkscanning.exception.*']
    threads = 10
    outputFormats = ['XML', 'HTML']
    mutationThreshold = 90
  }

