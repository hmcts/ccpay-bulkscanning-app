<policies>
  <backend>
    <base/>
  </backend>
  <inbound>
    <base/>
    <validate-azure-ad-token header-name="Authorization" tenant-id="${cft_oauth2_tenant_id}" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Access token is missing or invalid.">
      <client-application-ids>
        <application-id>${cft_oauth2_client_id}</application-id>
      </client-application-ids>
      <audiences>
        <audience>${cft_oauth2_app_id}</audience>
      </audiences>
    </validate-azure-ad-token>
    <!-- remove OAuth2 Authorization header -->
    <set-header name="Authorization" exists-action="delete" />
    <!-- generate totp -->
    <set-variable name="client_id" value="${s2s_client_id}" />
    <set-variable name="client_secret" value="${s2s_client_secret}" />
    <set-variable name="one_time_password" value="@{
      const string Base32Chars = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&quot;;

      string clientSecret = ((string)context.Variables[&quot;client_secret&quot;]).ToUpperInvariant();

      // Convert Base32 string to binary string
      var binaryString = string.Concat(
          clientSecret.Select(c => Convert.ToString(Base32Chars.IndexOf(c), 2).PadLeft(5, '0'))
      );

      // Convert binary string to byte array
      var secretKeyBytes = Enumerable.Range(0, binaryString.Length / 8)
          .Select(i => Convert.ToByte(binaryString.Substring(i * 8, 8), 2))
          .ToArray();

      // Calculate the time step (30-second intervals)
      long timestamp = (long)(DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalSeconds;
      long timestep = timestamp / 30;

      // Convert timestep to byte array (big-endian)
      byte[] challenge = BitConverter.GetBytes(timestep);
      if (BitConverter.IsLittleEndian) Array.Reverse(challenge);

      // HMAC-SHA1
      using var hmac = new System.Security.Cryptography.HMACSHA1(secretKeyBytes);
      byte[] hash = hmac.ComputeHash(challenge);

      // Dynamic truncation
      int offset = hash[^1] & 0x0F;
      int binaryCode = (hash[offset] & 0x7F) << 24
                     | (hash[offset + 1] & 0xFF) << 16
                     | (hash[offset + 2] & 0xFF) << 8
                     | (hash[offset + 3] & 0xFF);

      // Modulo to get 6-digit code
      int otp = binaryCode % 1000000;

      return otp.ToString(&quot;D6&quot;);
    }"/>
    <send-request ignore-error="false" timeout="20" response-variable-name="s2sBearerToken" mode="new">
      <set-url>${s2s_base_url}/lease</set-url>
      <set-method>POST</set-method>
      <set-header name="Content-Type" exists-action="override">
        <value>application/json</value>
      </set-header>
      <set-body>@{
        return new JObject(
        new JProperty("microservice", (string)context.Variables["client_id"]),
        new JProperty("oneTimePassword", (string)context.Variables["one_time_password"])
        ).ToString();
        }</set-body>
    </send-request>
    <set-header name="ServiceAuthorization" exists-action="override">
      <value>@("Bearer " + ((IResponse)context.Variables["s2sBearerToken"]).Body.As&lt;string&gt;())</value>
    </set-header>
  </inbound>
  <outbound>
    <base/>
  </outbound>
  <on-error>
    <base/>
  </on-error>
</policies>
